using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using System.Xml.Linq;
using System.IO;

namespace PlasmaShaft
{
    static class PlayerDB
    {
        //General way the DB will work:
        //DB is NOT loaded on server start
        //When a player logs in, Load will be called to fetch values for the logging in player
        //This will ensure quick start up times since we can use the Load method lazily, only as needed
        //For saving, the server will simply save all names on shutdown, appending new players and updating current ones, it will only update players that joined the server since last startup

        /// <summary>
        /// Loads the playerDB from xml, also updates several fields on log in
        /// </summary>
        public static void Load(Player player)
        {
            if (File.Exists("PlayerDB.xml"))
            {
                XDocument doc = XDocument.Load("PlayerDB.xml");
                if (doc.Root.Element(player.Name) != null)
                {
                    TimeSpan time;
                    XAttribute[] attr = doc.Root.Element(player.Name).Attributes().ToArray();
                    player.IsBanned = (bool)attr[0];
                    player.BanDate = (DateTime)attr[1];
                    player.BannedBy = attr[2].ToString();
                    player.UnbanDate = (DateTime)attr[3];
                    player.UnbannedBy = attr[4].ToString();
                    player.BanReason = attr[5].ToString();
                    player.UnbanReason = attr[6].ToString();
                    player.FirstLoginDate = (DateTime)attr[7];
                    player.LastLoginDate = DateTime.Today;
                    player.TotalTime =  attr[9].ToString().TryParseMiniTimespan(out time) ? time : TimeSpan.Zero;
                    player.BlocksBuilt = (int)attr[10];
                    player.BlocksDeleted = (int)attr[11];
                    player.TimesVisited = (int)attr[12] + 1;
                    player.MessagesWritten = (int)attr[13];
                    player.RankChangeReason = attr[14].ToString();
                    player.TimesKicked = (int)attr[15];
                    player.TimesKickedOthers = (int)attr[16];
                    player.TimesBannedOthers = (int)attr[17];
                    player.ID = (byte)(int)attr[18];
                    player.LastKickDate = (DateTime)attr[19];
                    player.LastSeen = DateTime.Today;
                    player.BlocksDrawn = (long)attr[21];
                    player.LastKickBy = attr[22].ToString();
                    player.LastKickReason = attr[23].ToString();
                    player.IsFrozen = (bool)attr[24];
                    player.FrozenBy = attr[25].ToString();
                    player.FrozenOn = (DateTime)attr[26];
                    player.MutedBy = attr[27].ToString();
                    player.DisplayedName = attr[28].ToString();
                }
            }
        }

        /// <summary>
        /// Saves the current playerDB to xml
        /// </summary>
        public static void Save()
        {
            XDocument doc = new XDocument();
            if (!File.Exists("PlayerDB.xml"))
            {
                //create the first node and comment
                doc.AddFirst(new XComment("This file was automatically generated by PlasmaShaft"));
                XElement rootNode = new XElement("PlasmaShaft");
                doc.Add(rootNode);

                foreach (Player player in Server.PlayersSinceStartUp)
                {
                    //doc.FirstChild is <PlasmaShaft></PlasmaShaft>, it's actually the only child lol
                    doc.Root.Add(NewXMLEntry(doc, player));
                }
                doc.Save("PlayerDB.xml");
            }
            else
            {
                doc = XDocument.Load("PlayerDB.xml");

                //returns all of the <player> elements
                var playerEntries = doc.Root.Descendants().ToList();

                foreach (Player player in Server.PlayersSinceStartUp)
                {
                    var match = from p in playerEntries where p.Name == player.Name select p;
                    if (match.Count() == 1)
                    {
                        match.First().ReplaceWith(NewXMLEntry(doc, player));
                    }
                    else
                    {
                        doc.Root.Add(NewXMLEntry(doc, player));
                    }
                         
                }
                doc.Save("PlayerDB.xml");
            }
        }

        /// <summary>
        /// Generates an XMLNode for a player
        /// </summary>
        private static XElement NewXMLEntry(XDocument doc, Player p)
        {
            XElement elem = new XElement(p.Name);
            elem.Add(new XAttribute("Banned", p.IsBanned.ToString()));
            elem.Add(new XAttribute("BanDate", p.BanDate.ToString()));
            elem.Add(new XAttribute("BannedBy", p.BannedBy));
            elem.Add(new XAttribute("UnbanDate", p.UnbanDate.ToString()));
            elem.Add(new XAttribute("UnbannedBy", p.UnbannedBy));
            elem.Add(new XAttribute("BanReason", p.BanReason));
            elem.Add(new XAttribute("UnbanReason", p.UnbanReason));
            elem.Add(new XAttribute("FirstLoginDate", p.FirstLoginDate.ToString()));
            elem.Add(new XAttribute("LastLoginDate", p.LastLoginDate.ToString()));
            elem.Add(new XAttribute("TotalTime", p.TotalTime.ToMiniString()));
            elem.Add(new XAttribute("BlocksBuilt", p.BlocksBuilt.ToString()));
            elem.Add(new XAttribute("BlocksDeleted", p.BlocksDeleted.ToString()));
            elem.Add(new XAttribute("TimesVisited", p.TimesVisited.ToString()));
            elem.Add(new XAttribute("MessagesWritted", p.MessagesWritten.ToString()));
            elem.Add(new XAttribute("RankChangeReason", p.RankChangeReason));
            elem.Add(new XAttribute("TimesKicked", p.TimesKicked.ToString()));
            elem.Add(new XAttribute("TimesKickedOthers", p.TimesKickedOthers.ToString()));
            elem.Add(new XAttribute("TimesBannedOthers", p.TimesBannedOthers.ToString()));
            elem.Add(new XAttribute("ID", p.ID.ToString()));
            elem.Add(new XAttribute("LastKickDate", p.LastKickDate.ToString()));
            elem.Add(new XAttribute("LastSeen", p.LastSeen.ToString()));
            elem.Add(new XAttribute("BlocksDrawn", p.BlocksDrawn.ToString()));
            elem.Add(new XAttribute("LastKickBy", p.LastKickBy));
            elem.Add(new XAttribute("LastKickReason", p.LastKickReason));
            elem.Add(new XAttribute("IsFrozen", p.IsFrozen.ToString()));
            elem.Add(new XAttribute("FrozenBy", p.FrozenBy));
            elem.Add(new XAttribute("FrozenOn", p.FrozenOn.ToString()));
            elem.Add(new XAttribute("MutedBy", p.MutedBy));
            elem.Add(new XAttribute("DisplayedName", (p.DisplayedName != "") ? p.DisplayedName : p.Name));
            return elem;
        }
    }
}
