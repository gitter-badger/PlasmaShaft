using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using System.Xml.Linq;
using System.IO;

namespace PlasmaShaft
{
    static class PlayerDB
    {
        //General way the DB will work:
        //DB is NOT loaded on server start
        //When a player logs in, Load will be called to fetch values for the logging in player
        //This will ensure quick start up times since we can use the Load method lazily, only as needed
        //For saving, the server will simply save all names on shutdown, appending new players and updating current ones, it will only update players that joined the server since last startup

        /// <summary>
        /// Loads the playerDB from xml
        /// </summary>
        public static void Load(Player player)
        {

        }

        /// <summary>
        /// Saves the current playerDB to xml
        /// </summary>
        public static void Save()
        {
            XmlDocument doc = new XmlDocument();
            if (!File.Exists("PlayerDB.xml"))
            {
                //create the first node and comment
                doc.CreateComment("This file was automatically generated by PlasmaShaft");
                XmlNode rootNode = doc.CreateElement("PlasmaShaft");
                doc.AppendChild(rootNode);

                foreach (Player player in Server.PlayersSinceStartUp)
                {
                    //doc.FirstChild is <PlasmaShaft></PlasmaShaft>, it's actually the only child lol
                    doc.FirstChild.InsertAfter(NewXMLEntry(doc, player), doc.LastChild.LastChild);
                }
                doc.Save("PlayerDB.xml");
            }
            else
            {
                doc.Load("PlayerDB.xml");
                foreach (Player player in Server.PlayersSinceStartUp)
                {
                    var playerEntries = new List<XmlNode>(doc.FirstChild.ChildNodes.Cast<XmlNode>());
                    var match = from p in playerEntries where p.Name == player.Name select p;
                    
                    //cannot find an playerEntries for this player, create one now
                    if (match == null)
                    {
                        //append this player to the end
                        doc.FirstChild.InsertAfter(NewXMLEntry(doc, player), doc.LastChild.LastChild);
                    }
                    else//match was found, we must update
                    {
                        //there can only be one match, match.first is the one we must remove
                        doc.FirstChild.RemoveChild(match.First());
                        doc.FirstChild.InsertAfter(NewXMLEntry(doc, player), doc.LastChild.LastChild);
                    }
                }
            }
        }

        /// <summary>
        /// Generates an XMLNode for a player
        /// </summary>
        private static XmlNode NewXMLEntry(XmlDocument doc, Player p)
        {
            XmlNode elem = doc.CreateElement(p.Name);          
            elem.Attributes.Append(doc.CreateAttribute("Banned", p.IsBanned.ToString()));
            elem.Attributes.Append(doc.CreateAttribute("BanDate", p.BanDate.ToUnixTimeString()));
            elem.Attributes.Append(doc.CreateAttribute("BannedBy", p.BannedBy));
            elem.Attributes.Append(doc.CreateAttribute("UnbanDate", p.UnbanDate.ToUnixTimeString()));
            elem.Attributes.Append(doc.CreateAttribute("UnbannedBy", p.UnbannedBy));
            elem.Attributes.Append(doc.CreateAttribute("BanReason", p.BanReason));
            elem.Attributes.Append(doc.CreateAttribute("UnbanReason", p.UnbanReason));
            elem.Attributes.Append(doc.CreateAttribute("FirstLoginDate", p.FirstLoginDate.ToUnixTimeString()));
            elem.Attributes.Append(doc.CreateAttribute("LastLoginDate", p.LastLoginDate.ToUnixTimeString()));
            elem.Attributes.Append(doc.CreateAttribute("TotalTime", p.TotalTime.ToTickString()));
            elem.Attributes.Append(doc.CreateAttribute("BlocksBuilt", p.BlocksBuilt.ToString()));
            elem.Attributes.Append(doc.CreateAttribute("BlocksDeleted", p.BlocksDeleted.ToString()));
            elem.Attributes.Append(doc.CreateAttribute("TimesVisited", p.TimesVisited.ToString()));
            elem.Attributes.Append(doc.CreateAttribute("MessagesWritted", p.MessagesWritten.ToString()));
            elem.Attributes.Append(doc.CreateAttribute("RankChangeReason", p.RankChangeReason));
            elem.Attributes.Append(doc.CreateAttribute("TimesKicked", p.TimesKicked.ToString()));
            elem.Attributes.Append(doc.CreateAttribute("TimesKickedOthers", p.TimesKickedOthers.ToString()));
            elem.Attributes.Append(doc.CreateAttribute("TimesBannedOthers", p.TimesBannedOthers.ToString()));
            elem.Attributes.Append(doc.CreateAttribute("ID", p.ID.ToString()));
            elem.Attributes.Append(doc.CreateAttribute("LastKickDate", p.LastKickDate.ToUnixTimeString()));
            elem.Attributes.Append(doc.CreateAttribute("LastSeen", p.LastSeen.ToUnixTimeString()));
            elem.Attributes.Append(doc.CreateAttribute("BlocksDrawn", p.BlocksDrawn.ToString()));
            elem.Attributes.Append(doc.CreateAttribute("LastKickBy", p.LastKickBy));
            elem.Attributes.Append(doc.CreateAttribute("LastKickReason", p.LastKickReason));
            elem.Attributes.Append(doc.CreateAttribute("IsFrozen", p.IsFrozen.ToString()));
            elem.Attributes.Append(doc.CreateAttribute("FrozenBy", p.FrozenBy));
            elem.Attributes.Append(doc.CreateAttribute("FrozenOn", p.FrozenOn.ToString()));
            elem.Attributes.Append(doc.CreateAttribute("MutedBy", p.MutedBy));
            elem.Attributes.Append(doc.CreateAttribute("DisplayedName", (p.DisplayedName != null) ? p.DisplayedName : p.Name));
            return elem;
        }
    }
}
